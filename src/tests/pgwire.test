package require tcltest
namespace import ::tcltest::*
::tcltest::loadTestedCommands

#namespace eval ::pgwire {variable block_accelerators 1}

package require pgwire
#puts "db: [exec ping -c 1 db]"
package require unix_sockets

#set connect {
#	unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]
#}
set connect {
	socket db 5432
}

set std_setup {
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
}

test pgwire-1.1 {Construct instance} -setup { #<<<
	set dbchan	[try $connect]
} -body {
	pgwire create pg $dbchan pagila postgres insecure
	info object isa object pg
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan
} -result 1
#>>>
test pgwire-1.2 {simple_query_dict} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg simple_query_dict row {select title from film where film_id=259} {
		set title	[dict get $row title]
	}
	set title
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan row title
} -result {DUCK RACER}
#>>>
test pgwire-1.3 {onecolumn} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg onecolumn {select title from film where film_id=259}
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan
} -result {DUCK RACER}
#>>>
test pgwire-2.1 {allrows -as lists, no -columnsvariable, 1 row, 2 columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg allrows -as lists {select release_year,title from film where film_id=286}
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan
} -result {{2006 {ENOUGH RAGING}}}
#>>>
test pgwire-2.2 {allrows -as lists, no -columnsvariable, 1 row, many columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set rows	[pg allrows -as lists {select * from film where film_id=286}]

	llength [lindex $rows 0]
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan rows
} -result 14
#>>>
test pgwire-2.4 {allrows -as lists, no -columnsvariable, 1000 rows, 2 columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
	set hold	$::pgwire::default_batchsize
	set ::pgwire::default_batchsize	17
} -body {
	set rows	[pg allrows -as lists {select film_id,rating from film}]

	list [llength $rows] [tcl::mathop::+ {*}[lmap row $rows {lindex $row 0}]]
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	set ::pgwire::default_batchsize	$hold
	unset -nocomplain dbchan rows row hold
} -result {1000 500500}
#>>>
test pgwire-3.1 {allrows -as dicts, 1 row, 2 columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg allrows -as dicts {select release_year,title from film where film_id=286}
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan
} -result {{release_year 2006 title {ENOUGH RAGING}}}
#>>>
test pgwire-3.2 {allrows -as dicts, 1 row, many columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set rows	[pg allrows -as dicts {select * from film where film_id=286}]
	list [dict get [lindex $rows 0] title] [dict keys [lindex $rows 0]]
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan rows
} -result {{ENOUGH RAGING} {film_id title description release_year language_id rental_duration rental_rate length replacement_cost rating last_update special_features fulltext}}
#>>>
test pgwire-3.3 {allrows with params dict} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg allrows -as dicts {select title from film where film_id=:film_id} {film_id 256}
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan
} -result {{title {DROP WATERFRONT}}}
#>>>
test pgwire-3.4 {allrows -as dicts, no -columnsvariable, 1 row, many columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set rows	[pg allrows -as dicts {select film_id from film}]

	list [llength $rows] [tcl::mathop::+ {*}[lmap row $rows {dict get $row film_id}]]
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan rows row
} -result {1000 500500}
#>>>
test pgwire-4.1 {foreach -as lists, no -columnsvariable, 1 row, 2 columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg foreach -as lists row {select release_year,title from film where film_id=286} {
		set res	[lindex $row 1]
	}
	set res
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan row
} -result {ENOUGH RAGING}
#>>>
test pgwire-4.2 {foreach -as lists, with -columnsvariable, 1 row, many columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg foreach -as lists -columnsvariable cols row {select * from film where film_id=286} {
		set res	[lindex $row [lsearch -exact $cols title]]
	}
	set res
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan row cols
} -result {ENOUGH RAGING}
#>>>
test pgwire-5.1 {foreach -as dicts, 1 row, 2 columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg foreach -as dicts row {select release_year,title from film where film_id=286} {
		set res	[dict get $row title]
	}
	set res
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan row
} -result {ENOUGH RAGING}
#>>>
test pgwire-5.2 {foreach -as dicts, 1 row, many columns} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg foreach -as dicts row {select * from film where film_id=286} {
		set res	[dict get $row title]
	}
	set res
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan row res
} -result {ENOUGH RAGING}
#>>>
test pgwire-5.3 {foreach with params dict} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	pg foreach -as dicts row {select * from film where film_id=:film_id} {film_id 256} {
		set res	[dict get $row title]
	}
	set res
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan row res
} -result {DROP WATERFRONT}
#>>>
test pgwire-5.4 {foreach with yield} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
	coroutine nextrow apply {{} {
		yield
		pg foreach row {
			select film_id from film
		} {
			#::pgwire::log notice "coro [info coroutine] yielding row: $row"
			yield $row
		}
		return
	}}
} -body {
	set acc		0
	set count	0
	while 1 {
		set row	[nextrow]
		if {[llength [info commands nextrow]] == 0} break
		incr acc [dict get $row film_id]
		incr count
	}
	list $count $acc
} -cleanup {
	if {[llength [info commands nextrow]] > 0} {
		rename nextrow {}
	}
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan acc count row obj
} -result {1000 500500}
#>>>
test pgwire-6.1 {Transactions, rollback} -setup $std_setup -body { #<<<
	set res	{}
	lappend res	[pg transaction_status]
	pg begintransaction
	lappend res	[pg transaction_status]
	pg rollback
	lappend res	[pg transaction_status]
	lappend res [pg ready_for_query]
	set res
} -cleanup {
	rename pg {}
	unset -nocomplain res
} -result {I T I 1}

#>>>
test pgwire-6.2 {Transactions, commit} -setup $std_setup -body { #<<<
	set res	{}
	lappend res	[pg transaction_status]
	pg begintransaction
	lappend res	[pg transaction_status]
	pg commit
	lappend res	[pg transaction_status]
	lappend res [pg ready_for_query]
	set res
} -cleanup {
	rename pg {}
	unset -nocomplain res
} -result {I T I 1}

#>>>
test pgwire-6.3 {Transactions, error} -setup $std_setup -body { #<<<
	set res	{}
	lappend res	[pg transaction_status]
	pg begintransaction
	lappend res	[pg transaction_status]
	try {
		pg allrows {select nonesuch()}
	} trap {PGWIRE ErrorResponse ERROR 42883} {} {
	}
	lappend res	[pg transaction_status]
	pg rollback
	lappend res	[pg transaction_status]
	lappend res [pg ready_for_query]
	set res
} -cleanup {
	rename pg {}
	unset -nocomplain res
} -result {I T E I 1}

#>>>
test pgwire-6.4 {Transactions, error} -setup $std_setup -body { #<<<
	set res	{}
	lappend res	[pg transaction_status]
	pg begintransaction
	lappend res	[pg transaction_status]
	try {
		pg allrows {select nonesuch()}
	} trap {PGWIRE ErrorResponse ERROR 42883} {} {
	}
	lappend res	[pg transaction_status]
	pg commit
	lappend res	[pg transaction_status]
	lappend res [pg ready_for_query]
	set res
} -cleanup {
	rename pg {}
	unset -nocomplain res
} -result {I T E I 1}

#>>>
test pgwire-6.5 {Transactions, nested begin} -setup $std_setup -body { #<<<
	set res	{}
	lappend res	[pg transaction_status]
	pg begintransaction
	lappend res	[pg transaction_status]
	pg begintransaction
	lappend res	[pg transaction_status]
	pg rollback
	lappend res	[pg transaction_status]
	lappend res [pg ready_for_query]
	set res
} -cleanup {
	rename pg {}
	unset -nocomplain res
} -result {I T T I 1}

#>>>
test pgwire-7.1 {ready_for_query} -setup $std_setup -body { #<<<
	pg onecolumn {set search_path to public}
	pg ready_for_query
} -cleanup {
	rename pg {}
} -result 1

#>>>
test pgwire-7.2 {ready_for_query} -setup $std_setup -body { #<<<
	pg allrows {set search_path to public}
	pg ready_for_query
} -cleanup {
	rename pg {}
} -result 1

#>>>
test pgwire-7.3 {ready_for_query} -setup $std_setup -body { #<<<
	set stmt_info [pg prepare_extended_query {select title from film where film_id=:film_id}]
	pg ready_for_query
} -cleanup {
	pg close_statement [dict get $stmt_info stmt_name]
	pg sync
	rename pg {}
	unset -nocomplain stmt_info
} -result 1

#>>>
test pgwire-8.1 {nested foreach, no transaction} -setup { #<<<
	set hold	$::pgwire::default_batchsize
	set ::pgwire::default_batchsize	17
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set res	{}
	set sum_film_id	0
	pg foreach film {select * from film order by film_id} {
		if {[dict get $film film_id] == 286} {
			pg foreach actor {
				select
					a.first_name,
					a.last_name
				from
					actor a
				join
					film_actor fa
				using
					(actor_id)
				where
					fa.film_id = :film_id
			} $film {
				lappend res	"[dict get $actor first_name] [dict get $actor last_name]"
			}
		}
		incr sum_film_id	[dict get $film film_id]
	}
	list $res $sum_film_id
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	set ::pgwire::default_batchsize	$hold
	unset -nocomplain dbchan film actor res hold
} -result {{{JOHNNY LOLLOBRIGIDA} {SANDRA PECK} {SEAN WILLIAMS} {JULIANNE DENCH} {KEVIN GARLAND} {RICHARD PENN} {AL GARLAND} {MATTHEW CARREY} {MICHAEL BOLGER}} 500500}
#>>>
test pgwire-8.2 {nested foreach, within transaction} -setup { #<<<
	set hold	$::pgwire::default_batchsize
	set ::pgwire::default_batchsize	17
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set res	{}
	set sum_film_id	0
	pg begintransaction
	pg foreach film {select * from film order by film_id} {
		if {[dict get $film film_id] == 286} {
			pg foreach actor {
				select
					a.first_name,
					a.last_name
				from
					actor a
				join
					film_actor fa
				using
					(actor_id)
				where
					fa.film_id = :film_id
			} $film {
				lappend res	"[dict get $actor first_name] [dict get $actor last_name]"
			}
		}

		incr sum_film_id	[dict get $film film_id]
	}
	pg commit
	list $res $sum_film_id
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	set ::pgwire::default_batchsize	$hold
	unset -nocomplain dbchan film actor res hold
} -result {{{JOHNNY LOLLOBRIGIDA} {SANDRA PECK} {SEAN WILLIAMS} {JULIANNE DENCH} {KEVIN GARLAND} {RICHARD PENN} {AL GARLAND} {MATTHEW CARREY} {MICHAEL BOLGER}} 500500}
#>>>
test pgwire-8.3 {nested onecolumn, no transaction} -setup { #<<<
	set hold	$::pgwire::default_batchsize
	set ::pgwire::default_batchsize	17
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set res	{}
	set sum_film_id	0
	pg foreach film {select * from film order by film_id} {
		if {[dict get $film film_id] == 286} {
			set film_id	[dict get $film film_id]
			lappend res	[pg onecolumn {
				select
					a.first_name || ' ' || a.last_name
				from
					actor a
				join
					film_actor fa
				using
					(actor_id)
				where
					fa.film_id = :film_id
				limit 1
			}]
		}
		incr sum_film_id	[dict get $film film_id]
	}
	list $res $sum_film_id
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	set ::pgwire::default_batchsize	$hold
	unset -nocomplain dbchan film actor res film_id hold
} -result {{{JOHNNY LOLLOBRIGIDA}} 500500}
#>>>
test pgwire-8.4 {nested onecolumn, within transaction} -setup { #<<<
	set hold	$::pgwire::default_batchsize
	set ::pgwire::default_batchsize	17
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set res	{}
	set sum_film_id	0
	pg begintransaction
	pg foreach film {select * from film order by film_id} {
		if {[dict get $film film_id] == 286} {
			set film_id	[dict get $film film_id]
			lappend res	[pg onecolumn {
				select
					a.first_name || ' ' || a.last_name
				from
					actor a
				join
					film_actor fa
				using
					(actor_id)
				where
					fa.film_id = :film_id
				limit 1
			}]
		}
		incr sum_film_id	[dict get $film film_id]
	}
	pg commit
	list $res $sum_film_id
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	set ::pgwire::default_batchsize	$hold
	unset -nocomplain dbchan film actor res film_id hold
} -result {{{JOHNNY LOLLOBRIGIDA}} 500500}
#>>>
test pgwire-8.5 {nested allrows, no transaction} -setup { #<<<
	set hold	$::pgwire::default_batchsize
	set ::pgwire::default_batchsize	17
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set res	{}
	set sum_film_id	0
	pg foreach film {select * from film order by film_id} {
		if {[dict get $film film_id] == 286} {
			lappend res	{*}[pg allrows -as lists {
				select
					a.first_name || ' ' || a.last_name
				from
					actor a
				join
					film_actor fa
				using
					(actor_id)
				where
					fa.film_id = :film_id
				limit 2
			} $film]
		}
		incr sum_film_id	[dict get $film film_id]
	}
	list $res $sum_film_id
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	set ::pgwire::default_batchsize	$hold
	unset -nocomplain dbchan film actor res hold
} -result {{{{JOHNNY LOLLOBRIGIDA}} {{SANDRA PECK}}} 500500}
#>>>
test pgwire-8.6 {nested allrows, no transaction} -setup { #<<<
	set dbchan	[try $connect]
	set hold	$::pgwire::default_batchsize
	set ::pgwire::default_batchsize	17
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set res	{}
	set sum_film_id	0
	pg begintransaction
	pg foreach film {select * from film order by film_id} {
		if {[dict get $film film_id] == 286} {
			lappend res	{*}[pg allrows -as lists {
				select
					a.first_name || ' ' || a.last_name
				from
					actor a
				join
					film_actor fa
				using
					(actor_id)
				where
					fa.film_id = :film_id
				limit 2
			} $film]
		}
		incr sum_film_id	[dict get $film film_id]
	}
	pg commit
	list $res $sum_film_id
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	set ::pgwire::default_batchsize	$hold
	unset -nocomplain dbchan film actor res hold
} -result {{{{JOHNNY LOLLOBRIGIDA}} {{SANDRA PECK}}} 500500}
#>>>
test pgwire-10.1 {casts vs params} -setup { #<<<
	set dbchan	[try $connect]
	pgwire create pg $dbchan pagila postgres insecure
} -body {
	set film_id	286
	pg allrows {
		select title from film where film_id = :film_id::integer
	}
} -cleanup {
	foreach obj {pg} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	if {[info exists dbchan] && $dbchan in [chan names]} {
		close $dbchan
	}
	unset -nocomplain dbchan film_id
} -result {{title {ENOUGH RAGING}}}
#>>>
test pgwire-11.1 {re-entrant checks} -setup $std_setup -body { #<<<
	pg allrows {set search_path to public}
	pg ready_for_query
} -cleanup {
	rename pg {}
} -result 1
#>>>

::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
