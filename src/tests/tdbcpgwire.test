package require tcltest
namespace import ::tcltest::*
::tcltest::loadTestedCommands

package require tdbc::pgwire

set connargs	{-db pagila -user postgres -password insecure -host db -port 5432}

test tdbcpgwire-1.1 {Construct instance} -body { #<<<
	tdbc::pgwire::connection create tdbcpgwire {*}$connargs
	info object isa object tdbcpgwire
} -cleanup {
	if {[info object isa object tdbcpgwire]} {
		tdbcpgwire destroy
	}
} -result 1
#>>>
test tdbcpgwire-10.1 {Construct statement} -setup { #<<<
	tdbc::pgwire::connection create tdbcpgwire {*}$connargs
} -body {
	set stmt	[tdbcpgwire prepare {select title from film where film_id=:film_id}]
	set film_id	286
	$stmt allrows
} -cleanup {
	if {[info exists stmt] && [info object isa object $stmt]} {
		$stmt destroy
	}
	if {[info object isa object tdbcpgwire]} {
		tdbcpgwire destroy
	}
	unset -nocomplain stmt film_id
} -result {{title {ENOUGH RAGING}}}
#>>>
test tdbcpgwire-10.2 {ErrorResponse statement allrows} -setup { #<<<
	tdbc::pgwire::connection create tdbcpgwire {*}$connargs
} -body {
	set stmt	[tdbcpgwire prepare {select foo from film where film_id=:film_id}]
	set film_id	286
	set code	[catch {$stmt allrows} r o]
	list $code $r [dict get $o -errorcode]
} -cleanup {
	if {[info exists stmt] && [info object isa object $stmt]} {
		$stmt destroy
	}
	if {[info object isa object tdbcpgwire]} {
		tdbcpgwire destroy
	}
	unset -nocomplain stmt film_id code r o
} -returnCodes error -errorCode {PGWIRE ErrorResponse ERROR 42703 *} -result {Postgres error: column "foo" does not exist}
#>>>
test tdbcpgwire-10.3 {ErrorResponse statement allrows during execute phase} -setup { #<<<
	set test	tdbcpgwire-10.3
	tdbc::pgwire::connection create tdbcpgwire {*}$connargs
	tdbcpgwire allrows {
		create or replace function testerror(tag text) returns text as $$
		begin
			raise EXCEPTION 'Test exception: %', tag;
		end;
		$$ language plpgsql strict
	}
} -body {
	set stmt	[tdbcpgwire prepare {select testerror(:test)}]
	[$stmt execute] close
} -cleanup {
	if {[info exists stmt] && [info object isa object $stmt]} {
		$stmt destroy
	}
	if {[info object isa object tdbcpgwire]} {
		tdbcpgwire allrows {drop function if exists testerror(tag text)}
		tdbcpgwire destroy
	}
	unset -nocomplain stmt test
} -returnCodes error -errorCode {PGWIRE ErrorResponse ERROR P0001 *} -result {Postgres error: Test exception: tdbcpgwire-10.3}
#>>>
test tdbcpgwire-11.1 {ready_for_query} -setup { #<<<
	tdbc::pgwire::connection create tdbcpgwire {*}$connargs
} -body {
	set stmt	[tdbcpgwire prepare {select title from film where film_id=:film_id}]
	tdbcpgwire ready_for_query
} -cleanup {
	if {[info exists stmt] && [info object isa object $stmt]} {
		rename $stmt {}
	}
	rename tdbcpgwire {}
	unset -nocomplain stmt
} -result 1

#>>>
test tdbcpgwire-20.1 {Resultset} -setup { #<<<
	tdbc::pgwire::connection create tdbcpgwire {*}$connargs
	rename ::pgwire::log _tmplog
	proc ::pgwire::log {lvl msg} {
		puts stderr "tdbcpgwire-20.1 $lvl: $msg"
	}
} -body {
	set res			{}
	set count		0
	set stmt		[tdbcpgwire prepare {select * from film}]
	set resultset	[$stmt execute]
	while {[$resultset nextdict row]} {
		incr count
		if {![dict exists $row film_id]} {
			::pgwire::log error "No film_id in row: ($row)"
			continue
		}
		if {[dict get $row film_id] == 286} {
			lappend res	[dict get $row title]
		}
	}
	list $count [$resultset rowcount] $res
} -cleanup {
	foreach v {resultset stmt} {
		if {[info exists $v] && [info object isa object [set $v]]} {
			[set $v] destroy
		}
	}
	if {[info object isa object tdbcpgwire]} {
		tdbcpgwire destroy
	}
	unset -nocomplain stmt res count resultset row
	catch {rename ::pgwire::log {}}
	rename _tmplog ::pgwire::log
} -result {1000 1000 {{ENOUGH RAGING}}}
#>>>
test tdbcpgwire-20.2 {Resultset, param_values dict} -setup { #<<<
	tdbc::pgwire::connection create tdbcpgwire {*}$connargs
	rename ::pgwire::log _tmplog
	proc ::pgwire::log {lvl msg} {
		puts stderr "tdbcpgwire-20.2 $lvl: $msg"
	}
} -body {
	set res			{}
	set count		0
	set stmt		[tdbcpgwire prepare {select title from film where film_id=:film_id}]
	set resultset	[$stmt execute {film_id 256}]
	while {[$resultset nextdict row]} {
		incr count
		lappend res $row
	}
	list $count [$resultset rowcount] $res
} -cleanup {
	foreach v {resultset stmt} {
		if {[info exists $v] && [info object isa object [set $v]]} {
			[set $v] destroy
		}
	}
	if {[info object isa object tdbcpgwire]} {
		tdbcpgwire destroy
	}
	unset -nocomplain stmt res count resultset row
	catch {rename ::pgwire::log {}}
	rename _tmplog ::pgwire::log
} -result {1 1 {{title {DROP WATERFRONT}}}}
#>>>
test tdbcpgwire-21.1 {Resultset, close} -setup { #<<<
	tdbc::pgwire::connection create tdbcpgwire {*}$connargs
	rename ::pgwire::log _tmplog
	proc ::pgwire::log {lvl msg} {
		puts stderr "tdbcpgwire-21.1 $lvl: $msg"
	}
} -body {
	set res			{}
	set count		0
	set stmt		[tdbcpgwire prepare {select title from film}]
	set resultset	[$stmt execute]
	$resultset close
	info object isa object $resultset
} -cleanup {
	foreach v {resultset stmt} {
		if {[info exists $v] && [info object isa object [set $v]]} {
			[set $v] destroy
		}
	}
	if {[info object isa object tdbcpgwire]} {
		tdbcpgwire destroy
	}
	unset -nocomplain stmt res count resultset row
	catch {rename ::pgwire::log {}}
	rename _tmplog ::pgwire::log
} -result 0
#>>>

::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
