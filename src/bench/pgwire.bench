if {"bench" ni [info commands bench]} {
	package require bench
	namespace import bench::*
}


package require pgwire
package require tdbc::postgres
package require unix_sockets

proc readfile fn { #<<<
	set h	[open $fn r]
	try {read $h} finally {close $h}
}

#>>>
proc get_batch_vars {db sql batchsize as} { #<<<
	set stmt_info	[$db prepare_extended_query $sql]
	dict with stmt_info {}
	# Sets:
	#	- $stmt_name: the name of the prepared statement (as known to the server)
	#	- $field_names:	the result column names and the local variables they are unpacked into
	#	- $build_params: script to run to gather the input params
	#	- $heat: how frequently this prepared statement has been used recently, relative to others

	try $build_params on ok parameters {}

	set max_rows_per_batch	$batchsize

	set ops	[::pgwire::build_ops $as $c_types]
	try {
		set rowbuffer	::rowbuffer_coro_get_batch_vars_[incr ::coro_seq]
		coroutine $rowbuffer $db rowbuffer_coro $stmt_name $rowbuffer $rformats $parameters $max_rows_per_batch
		lassign [$rowbuffer nextbatch] outcome details datarows

		list \
			ops				$ops \
			columns			$columns \
			tcl_encoding	[$db tcl_encoding] \
			datarows		$datarows \
			c_types			$c_types \
			delims			$delims \
			tcl_makerow		[$db tcl_makerow $as $c_types]
	} finally {
		if {[info exists rowbuffer] && [llength [info commands $rowbuffer]] > 0} {
			$rowbuffer destroy
		}
	}
}

#>>>

proc main {} {
bench pgwire-1.0 {select 1, simple_query_list} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
} -compare {
	pgwire_lo {
		pgwire_lo simple_query_list row {select 1} {set res [lindex $row 0]}
		set res
	}

	pgwire_uds {
		pgwire_uds simple_query_list row {select 1} {set res [lindex $row 0]}
		set res
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain res
} -result 1
#>>>
bench pgwire-1.1 {select 1} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure
} -compare {
	pgwire_lo {
		pgwire_lo onecolumn {select 1}
	}

	pgwire_uds {
		pgwire_uds onecolumn {select 1}
	}

	tdbc_postgres {
		lindex [tdbc_postgres allrows -as lists {select 1}] 0 0
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
} -result 1
#>>>
bench pgwire-1.2 {onecolumn} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure
} -compare {
	pgwire_lo {
		pgwire_lo onecolumn {select title from film where film_id=286}
	}

	pgwire_uds {
		pgwire_uds onecolumn {select title from film where film_id=286}
	}

	tdbc_postgres {
		lindex [tdbc_postgres allrows -as lists {select title from film where film_id=286}] 0 0
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
} -result {ENOUGH RAGING}
#>>>
bench pgwire-1.3 {onecolumn, with param} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure
	set film_id	286
} -compare {
	pgwire_lo {
		pgwire_lo onecolumn {select title from film where film_id=:film_id}
	}

	pgwire_uds {
		pgwire_uds onecolumn {select title from film where film_id=:film_id}
	}

	tdbc_postgres {
		lindex [tdbc_postgres allrows -as lists {select title from film where film_id=:film_id}] 0 0
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain film_id
} -result {ENOUGH RAGING}
#>>>
bench pgwire-1.4 {sync} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
} -compare {
	pgwire_lo  { pgwire_lo  sync }
	pgwire_uds { pgwire_uds sync }
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
} -result I
#>>>
bench pgwire-2.1 {allrows, large number of columns, lists} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_lo     { llength [pgwire_lo  allrows -as lists $q] }
	pgwire_uds    { llength [pgwire_uds allrows -as lists $q] }
	pgwire_uds_foreach    {
		set rows	{}
		pgwire_uds foreach -as lists row $q {
			lappend rows $row
		}
		llength $rows[unset rows]
	}
	tdbc_postgres { llength [tdbc_postgres allrows -as lists $q] }
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q
} -result 1000
#>>>
bench pgwire-2.2 {allrows, large number of columns, dicts} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_lo     { llength [pgwire_lo  allrows -as dicts $q] }
	pgwire_uds    { llength [pgwire_uds allrows -as dicts $q] }
	tdbc_postgres { llength [tdbc_postgres allrows -as dicts $q] }
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q
} -result 1000
#>>>
bench pgwire-2.3 {allrows, one row, large number of columns, dicts} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film where film_id=286}
} -compare {
	pgwire_lo     { dict get [lindex [pgwire_lo  allrows -as dicts $q] 0] title }
	pgwire_uds    { dict get [lindex [pgwire_uds allrows -as dicts $q] 0] title }
	tdbc_postgres { dict get [lindex [tdbc_postgres allrows -as dicts $q] 0] title }
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q
} -result {ENOUGH RAGING}
#>>>
bench pgwire-2.4 {allrows, one row, one column, dicts} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select title from film where film_id=286}
} -compare {
	pgwire_lo     { dict get [lindex [pgwire_lo  allrows -as dicts $q] 0] title }
	pgwire_uds    { dict get [lindex [pgwire_uds allrows -as dicts $q] 0] title }
	tdbc_postgres { dict get [lindex [tdbc_postgres allrows -as dicts $q] 0] title }
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q
} -result {ENOUGH RAGING}
#>>>
bench pgwire-3.1 {foreach, large number of columns} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_uds_dicts {
		set count	0
		pgwire_uds foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	pgwire_lo_dicts {
		set count	0
		pgwire_lo foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	pgwire_uds_lists {
		set count	0
		pgwire_uds foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
	pgwire_lo_lists {
		set count	0
		pgwire_lo foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
	tdbc_postgres_dicts {
		set count	0
		tdbc_postgres foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	tdbc_postgres_lists {
		set count	0
		tdbc_postgres foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q count
} -result 1000
#>>>
bench pgwire-3.2 {foreach, medium number of columns} -setup { #<<<
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select film_id,title,description,release_year from film}
} -compare {
	pgwire_uds_dicts {
		set count	0
		pgwire_uds foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	pgwire_uds_lists {
		set count	0
		pgwire_uds foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
	tdbc_postgres_dicts {
		set count	0
		tdbc_postgres foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	tdbc_postgres_lists {
		set count	0
		tdbc_postgres foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q count
} -result 1000
#>>>
bench pgwire-3.3 {foreach, small number of columns} -setup { #<<<
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select film_id,title from film}
} -compare {
	pgwire_uds_dicts {
		set count	0
		pgwire_uds foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	pgwire_lo_dicts {
		set count	0
		pgwire_lo foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	pgwire_uds_lists {
		set count	0
		pgwire_uds foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
	pgwire_lo_lists {
		set count	0
		pgwire_lo foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
	tdbc_postgres_dicts {
		set count	0
		tdbc_postgres foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	tdbc_postgres_lists {
		set count	0
		tdbc_postgres foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q count
} -result 1000
#>>>
bench pgwire-4.1 {foreach, large number of columns, dicts} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_lo     {
		set count 0
		pgwire_lo foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds    {
		set count 0
		pgwire_uds foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres {
		set count 0
		tdbc_postgres foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q count title row
} -result {1000 {ENOUGH RAGING}}
#>>>
bench pgwire-5.1 {foreach, large number of columns vs foreach [allrows]} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_lo_foreach     {
		set count 0
		pgwire_lo foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_lo_allrows     {
		set count 0
		foreach row [pgwire_lo allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_foreach    {
		set count 0
		pgwire_uds foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_allrows    {
		set count 0
		foreach row [pgwire_uds allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_foreach {
		set count 0
		tdbc_postgres foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_allrows {
		set count 0
		foreach row [tdbc_postgres allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q count title row
} -result {1000 {ENOUGH RAGING}}
#>>>
bench pgwire-5.2 {foreach, medium number of columns vs foreach [allrows]} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select film_id,title,description,release_year from film}
} -compare {
	pgwire_lo_foreach     {
		set count 0
		pgwire_lo foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_lo_allrows     {
		set count 0
		foreach row [pgwire_lo allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_foreach    {
		set count 0
		pgwire_uds foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_allrows    {
		set count 0
		foreach row [pgwire_uds allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_foreach {
		set count 0
		tdbc_postgres foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_allrows {
		set count 0
		foreach row [tdbc_postgres allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q count title row
} -result {1000 {ENOUGH RAGING}}
#>>>
bench pgwire-5.3 {foreach, small number of columns vs foreach [allrows]} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select film_id,title from film}
} -compare {
	pgwire_lo_foreach     {
		set count 0
		pgwire_lo foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_lo_allrows     {
		set count 0
		foreach row [pgwire_lo allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_foreach    {
		set count 0
		pgwire_uds foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_allrows    {
		set count 0
		foreach row [pgwire_uds allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_foreach {
		set count 0
		tdbc_postgres foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_allrows {
		set count 0
		foreach row [tdbc_postgres allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain q count title row
} -result {1000 {ENOUGH RAGING}}
#>>>
bench pgwire-6.1 {transactions: simple_query_list vs extended_query} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure
} -compare {
	pgwire_simple_query_list     {
		set res	{}
		pgwire_uds simple_query_list r begin {}
		lappend res [pgwire_uds transaction_status]
		pgwire_uds simple_query_list r rollback {}
		lappend res [pgwire_uds transaction_status] [pgwire_uds ready_for_query]
		set res
	}
	pgwire_methods     {
		set res	{}
		pgwire_uds begintransaction
		lappend res [pgwire_uds transaction_status]
		pgwire_uds rollback
		lappend res [pgwire_uds transaction_status] [pgwire_uds ready_for_query]
		set res
	}
	pgwire_methods_lo     {
		set res	{}
		pgwire_lo begintransaction
		lappend res [pgwire_lo transaction_status]
		pgwire_lo rollback
		lappend res [pgwire_lo transaction_status] [pgwire_lo ready_for_query]
		set res
	}
	tdbc_postgres	{
		set res	{}
		tdbc_postgres begintransaction
		lappend res T
		tdbc_postgres rollback
		lappend res I 1
		set res
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain res
} -result {T I 1}
#>>>
bench pgwire-7.1 {makerow} -setup { #<<<
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	set ops_list		{op_int4_lists op_text_lists op_text_lists op_int4_lists op_int2_lists op_int2_lists op_int2_lists op_text_lists op_int2_lists op_text_lists op_text_lists op_text_lists op_text_lists op_text_lists}
	set ops_dict		{op_int4_dicts op_text_dicts op_text_dicts op_int4_dicts op_int2_dicts op_int2_dicts op_int2_dicts op_text_dicts op_int2_dicts op_text_dicts op_text_dicts op_text_dicts op_text_dicts op_text_dicts}
	set columns 		{film_id title description release_year language_id original_language_id rental_duration rental_rate length replacement_cost rating last_update special_features fulltext}
	set tcl_encoding	utf-8
	set c_types			{
		film_id int4 {}
		title text {}
		description text {}
		release_year int4 {}
		language_id int2 {}
		original_language_id int2 {}
		rental_duration int2 {}
		rental_rate text {}
		length int2 {}
		replacement_cost text {}
		rating text {}
		last_update text {}
		special_features text {}
		fulltext text {}
	}
	set delims	[lrepeat [llength $columns] {}] 
	set datarow	[binary decode hex 000e00000004000003e8000000095a4f52524f2041524b000000554120496e7472657069642050616e6f72616d61206f662061204d616420536369656e7469737420416e64206120426f792077686f206d7573742052656465656d206120426f7920696e2041204d6f6e61737465727900000004000007d6000000020001ffffffff00000002000300000004342e39390000000200320000000531382e3939000000054e432d31370000001d323032302d30392d31302031363a34363a30332e3930353739352b30300000002b7b547261696c6572732c436f6d6d656e7461726965732c22426568696e6420746865205363656e6573227d000000722761726b273a322027626f79273a31322c31372027696e747265706964273a3420276d6164273a3820276d6f6e617374657269273a323020276d757374273a3134202770616e6f72616d61273a35202772656465656d273a31352027736369656e74697374273a3920277a6f72726f273a31]
	set tcl_makerow_lists	[list {datarow ops_list ops_dict columns tcl_encoding c_types delims} "variable ::pgwire::arr_fmt_cache\n[pgwire_uds tcl_makerow lists $c_types]\nlindex \$row 1"]
	set tcl_makerow_dicts	[list {datarow ops_list ops_dict columns tcl_encoding c_types delims} "variable ::pgwire::arr_fmt_cache\n[pgwire_uds tcl_makerow dicts $c_types]\ndict get \$row title"]
} -compare {
	tcl_makerow_list {
		apply $tcl_makerow_lists $datarow $ops_list $ops_dict $columns $tcl_encoding $c_types $delims
	}
	tcl_makerow_dict {
		apply $tcl_makerow_dicts $datarow $ops_list $ops_dict $columns $tcl_encoding $c_types $delims
	}
	c_makerow2_list {
		lindex [::pgwire::c_makerow2 $ops_list $columns $tcl_encoding $datarow $delims] 1
	}
	c_makerow2_dict {
		dict get [::pgwire::c_makerow2 $ops_dict $columns $tcl_encoding $datarow $delims] title
	}
} -cleanup {
	foreach obj {pgwire_uds} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain row ops_list ops_dict columns tcl_encoding c_types datarow tcl_makerow_lists tcl_makerow_dicts collen val o obj delims
} -result {ZORRO ARK}
#>>>
bench pgwire-7.2 {build_ops} -setup { #<<<
	set c_types			{
		film_id int4 {}
		title text {}
		description text {}
		release_year int4 {}
		language_id int2 {}
		original_language_id int2 {}
		rental_duration int2 {}
		rental_rate text {}
		length int2 {}
		replacement_cost text {}
		rating text {}
		last_update text {}
		special_features text {}
		fulltext text {}
	}
} -compare {
	dicts {
		llength [::pgwire::build_ops dicts $c_types]
	}
	lists {
		llength [::pgwire::build_ops lists $c_types]
	}
} -cleanup {
	foreach obj {pgwire_uds} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain c_types obj
} -result 14
#>>>
bench pgwire-7.2.1 {compile_ops} -setup { #<<<
	set c_types			{
		film_id int4 {}
		title text {}
		description text {}
		release_year int4 {}
		language_id int2 {}
		original_language_id int2 {}
		rental_duration int2 {}
		rental_rate text {}
		length int2 {}
		replacement_cost text {}
		rating text {}
		last_update text {}
		special_features text {}
		fulltext text {}
	}
	set ops				"[::pgwire::build_ops dicts $c_types] "
	set expecting		[expr {[llength $c_types] / 3}]
} -compare {
	fresh_ops {
		::pgwire::compile_ops [::pgwire::build_ops dicts $c_types] $expecting
	}
	cached_ops {
		::pgwire::compile_ops $ops $expecting
	}
	cached_ops_string {
		::pgwire::compile_ops [string trim $ops] $expecting
	}
} -cleanup {
	foreach obj {pgwire_uds} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain c_types obj ops expecting
} -result {}
#>>>
bench pgwire-7.2.2 {ops cache lookup} -setup { #<<<
	set c_types			{
		film_id int4 {}
		title text {}
		description text {}
		release_year int4 {}
		language_id int2 {}
		original_language_id int2 {}
		rental_duration int2 {}
		rental_rate text {}
		length int2 {}
		replacement_cost text {}
		rating text {}
		last_update text {}
		special_features text {}
		fulltext text {}
	}
	set ops_cache_empty	{}
	set ops_cache_miss	[dict create lists [::pgwire::build_ops lists $c_types]]
	set ops_cache_hit	[dict create dicts [::pgwire::build_ops dicts $c_types]]
} -compare {
	ops_cache_empty_try {
		try {
			dict get $ops_cache_empty dicts
		} on ok ops {
		} trap {TCL LOOKUP DICT} {} {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		}
		set ops
	}
	ops_cache_empty_catch {
		if {[catch {
			set ops	[dict get $ops_cache_empty dicts]
		}]} {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		}
		set ops
	}
	ops_cache_empty_check {
		if {[dict exists $ops_cache_empty dicts]} {
			set ops	[dict get $ops_cache_empty dicts]
		} else {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		}
		set ops
	}
	ops_cache_miss_try {
		try {
			dict get $ops_cache_miss dicts
		} on ok ops {
		} trap {TCL LOOKUP DICT} {} {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		}
		set ops
	}
	ops_cache_miss_catch {
		if {[catch {
			set ops [dict get $ops_cache_miss dicts]
		}]} {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		} 
		set ops
	}
	ops_cache_miss_check {
		if {[dict exists $ops_cache_miss dicts]} {
			set ops	[dict get $ops_cache_miss dicts]
		} else {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		}
		set ops
	}
	ops_cache_hit_try {
		try {
			dict get $ops_cache_hit dicts
		} on ok ops {
		} trap {TCL LOOKUP DICT} {} {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		}
		set ops
	}
	ops_cache_hit_catch {
		if {[catch {
			set ops	[dict get $ops_cache_hit dicts]
		}]} {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		}
		set ops
	}
	ops_cache_hit_check {
		if {[dict exists $ops_cache_hit dicts]} {
			set ops	[dict get $ops_cache_hit dicts]
		} else {
			dict set ops_cache dicts [set ops [::pgwire::build_ops dicts $c_types]]
		}
		set ops
	}
} -cleanup {
	foreach obj {pgwire_uds} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain c_types obj ops ops_cache_empty ops_cache_miss ops_cache_hit ops_cache
} -result {op_int4_dicts op_text_dicts op_text_dicts op_int4_dicts op_int2_dicts op_int2_dicts op_int2_dicts op_text_dicts op_int2_dicts op_text_dicts op_text_dicts op_text_dicts op_text_dicts op_text_dicts}
#>>>
bench pgwire-7.3 {foreach_batch} -setup { #<<<
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	set cleanup	{}
	set params	{}
	set vals	{}
	foreach {k v} [get_batch_vars pgwire_uds {select * from film} 0 dicts] {
		lappend params	$k
		lappend vals	$v
		set $k $v
		lappend cleanup $k
	}
	set tcl_makerow_lambda [list [list datarow {*}$params] "variable ::pgwire::arr_fmt_cache; $tcl_makerow; set row"]
} -compare {
	tcl_makerow {
		set acc		0
		set count	0
		foreach datarow $datarows {
			set row	[apply $tcl_makerow_lambda $datarow {*}$vals]
			try {
				incr count
				incr acc	[dict get $row film_id]
			} on break {} {
				set broken	1
				break
			} on continue {} {
			} on return {r o} {
				#::pgwire::log notice "foreach script caught return r: ($r), o: ($o)"
				set broken	1
				dict incr o -level 1
				dict set o -code return
				set rethrow	[list -options $o $r]
				break
			} on error {r o} {
				#::pgwire::log notice "foreach script caught error r: ($r), o: ($o)"
				set broken	1
				dict incr o -level 1
				set rethrow	[list -options $o $r]
				break
			}
		}
		if {[info exists rethrow]} {
			return {*}$rethrow
		}
		list $count $acc
	}
	c_foreach_batch {
		set acc		0
		set count	0
		::pgwire::c_foreach_batch row $ops $columns $tcl_encoding $datarows {
			incr count
			incr acc	[dict get $row film_id]
		} $delims
		list $count $acc
	}
	c_foreach_batch_nr {
		set acc		0
		set count	0
		::pgwire::c_foreach_batch_nr row $ops $columns $tcl_encoding $datarows {
			incr count
			incr acc	[dict get $row film_id]
		} $delims
		list $count $acc
	}
} -cleanup {
	foreach obj {pgwire_uds} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain {*}$cleanup row datarow tcl_makerow_dicts collen val o obj cleanup k v acc count rethrow broken r params vals tcl_makerow_lambda
} -result {1000 500500}
if 0 {
}
#>>>
bench pgwire-8.1 {vars, no script} -setup { #<<<
	pgwire create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure
} -compare {
	pgwire_lo {
		pgwire_lo vars {select title from film where film_id=286}
		set title
	}

	pgwire_uds {
		pgwire_uds vars {select title from film where film_id=286}
		set title
	}

	tdbc_postgres {
		lindex [tdbc_postgres allrows -as lists {select title from film where film_id=286}] 0 0
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		if {[info object isa object $obj]} {
			$obj destroy
		}
	}
	unset -nocomplain title
} -result {ENOUGH RAGING}
#>>>
}

main

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
