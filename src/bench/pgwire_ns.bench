if {"bench" ni [info commands bench]} {
	package require bench
	namespace import bench::*
}


tcl::tm::path add [file join [file dirname [file dirname [file normalize [info script]]]] tm]
package require pgwire_ns
package require tdbc::postgres
package require unix_sockets

proc main {} {
bench pgwire_ns-1.0 {select 1, simple_query_list} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
} -compare {
	pgwire_lo {
		pgwire_lo simple_query_list row {select 1} {set res [lindex $row 0]}
		set res
	}

	pgwire_uds {
		pgwire_uds simple_query_list row {select 1} {set res [lindex $row 0]}
		set res
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds} {
		catch {rename $obj {}}
	}
	unset -nocomplain res
} -result 1
#>>>
bench pgwire_ns-1.1 {select 1} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure
} -compare {
	pgwire_lo {
		pgwire_lo onecolumn {select 1}
	}

	pgwire_uds {
		pgwire_uds onecolumn {select 1}
	}

	tdbc_postgres {
		lindex [tdbc_postgres allrows -as lists {select 1}] 0 0
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
} -result 1
#>>>
bench pgwire_ns-1.2 {onecolumn} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure
} -compare {
	pgwire_lo {
		pgwire_lo onecolumn {select title from film where film_id=286}
	}

	pgwire_uds {
		pgwire_uds onecolumn {select title from film where film_id=286}
	}

	tdbc_postgres {
		lindex [tdbc_postgres allrows -as lists {select title from film where film_id=286}] 0 0
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
} -result {ENOUGH RAGING}
#>>>
bench pgwire_ns-1.3 {onecolumn, with param} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure
	set film_id	286
} -compare {
	pgwire_lo {
		pgwire_lo onecolumn {select title from film where film_id=:film_id}
	}

	pgwire_uds {
		pgwire_uds onecolumn {select title from film where film_id=:film_id}
	}

	tdbc_postgres {
		lindex [tdbc_postgres allrows -as lists {select title from film where film_id=:film_id}] 0 0
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain film_id
} -result {ENOUGH RAGING}
#>>>
bench pgwire_ns-1.4 {sync} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
} -compare {
	pgwire_lo  { pgwire_lo  sync }
	pgwire_uds { pgwire_uds sync }
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds} {
		catch {rename $obj {}}
	}
} -result I
#>>>
bench pgwire_ns-2.1 {allrows, large number of columns, lists} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_lo     { llength [pgwire_lo  allrows -as lists $q] }
	pgwire_uds    { llength [pgwire_uds allrows -as lists $q] }
	tdbc_postgres { llength [tdbc_postgres allrows -as lists $q] }
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q
} -result 1000
#>>>
bench pgwire_ns-2.2 {allrows, large number of columns, dicts} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_lo     { llength [pgwire_lo  allrows -as dicts $q] }
	pgwire_uds    { llength [pgwire_uds allrows -as dicts $q] }
	tdbc_postgres { llength [tdbc_postgres allrows -as dicts $q] }
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q
} -result 1000
#>>>
bench pgwire_ns-3.1 {foreach, large number of columns} -setup { #<<<
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_uds_dicts {
		set count	0
		pgwire_uds foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	pgwire_uds_lists {
		set count	0
		pgwire_uds foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
	tdbc_postgres_dicts {
		set count	0
		tdbc_postgres foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	tdbc_postgres_lists {
		set count	0
		tdbc_postgres foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q count
} -result 1000
#>>>
bench pgwire_ns-3.2 {foreach, medium number of columns} -setup { #<<<
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select film_id,title,description,release_year from film}
} -compare {
	pgwire_uds_dicts {
		set count	0
		pgwire_uds foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	pgwire_uds_lists {
		set count	0
		pgwire_uds foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
	tdbc_postgres_dicts {
		set count	0
		tdbc_postgres foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	tdbc_postgres_lists {
		set count	0
		tdbc_postgres foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q count
} -result 1000
#>>>
bench pgwire_ns-3.3 {foreach, small number of columns} -setup { #<<<
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select film_id,title from film}
} -compare {
	pgwire_uds_dicts {
		set count	0
		pgwire_uds foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	pgwire_uds_lists {
		set count	0
		pgwire_uds foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
	tdbc_postgres_dicts {
		set count	0
		tdbc_postgres foreach -as dicts row $q {
			dict get $row film_id
			incr count
		}
		set count
	}
	tdbc_postgres_lists {
		set count	0
		tdbc_postgres foreach -as lists row $q {
			lindex $row 0
			incr count
		}
		set count
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q count
} -result 1000
#>>>
bench pgwire_ns-4.1 {foreach, large number of columns, dicts} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_lo     {
		set count 0
		pgwire_lo foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds    {
		set count 0
		pgwire_uds foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres {
		set count 0
		tdbc_postgres foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q count title row
} -result {1000 {ENOUGH RAGING}}
#>>>
bench pgwire_ns-5.1 {foreach, large number of columns vs foreach [allrows]} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select * from film}
} -compare {
	pgwire_lo_foreach     {
		set count 0
		pgwire_lo foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_lo_allrows     {
		set count 0
		foreach row [pgwire_lo allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_foreach    {
		set count 0
		pgwire_uds foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_allrows    {
		set count 0
		foreach row [pgwire_uds allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_foreach {
		set count 0
		tdbc_postgres foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_allrows {
		set count 0
		foreach row [tdbc_postgres allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q count title row
} -result {1000 {ENOUGH RAGING}}
#>>>
bench pgwire_ns-5.2 {foreach, medium number of columns vs foreach [allrows]} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select film_id,title,description,release_year from film}
} -compare {
	pgwire_lo_foreach     {
		set count 0
		pgwire_lo foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_lo_allrows     {
		set count 0
		foreach row [pgwire_lo allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_foreach    {
		set count 0
		pgwire_uds foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_allrows    {
		set count 0
		foreach row [pgwire_uds allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_foreach {
		set count 0
		tdbc_postgres foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_allrows {
		set count 0
		foreach row [tdbc_postgres allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q count title row
} -result {1000 {ENOUGH RAGING}}
#>>>
bench pgwire_ns-5.3 {foreach, small number of columns vs foreach [allrows]} -setup { #<<<
	pgwire_ns create pgwire_lo [socket db 5432] pagila postgres insecure
	pgwire_ns create pgwire_uds [unix_sockets::connect [file join $::env(PGHOST) .s.PGSQL.5432]] pagila postgres insecure
	tdbc::postgres::connection create tdbc_postgres -host db -db pagila -user postgres -password insecure

	set q {select film_id,title from film}
} -compare {
	pgwire_lo_foreach     {
		set count 0
		pgwire_lo foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_lo_allrows     {
		set count 0
		foreach row [pgwire_lo allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_foreach    {
		set count 0
		pgwire_uds foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	pgwire_uds_allrows    {
		set count 0
		foreach row [pgwire_uds allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_foreach {
		set count 0
		tdbc_postgres foreach -as dicts row $q {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
	tdbc_postgres_allrows {
		set count 0
		foreach row [tdbc_postgres allrows -as dicts $q] {
			incr count
			if {[dict get $row film_id] == 286} {
				set title [dict get $row title]
			}
		}
		list $count $title
	}
} -cleanup {
	foreach obj {pgwire_lo pgwire_uds tdbc_postgres} {
		catch {rename $obj {}}
	}
	unset -nocomplain q count title row
} -result {1000 {ENOUGH RAGING}}
#>>>
}

main

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
